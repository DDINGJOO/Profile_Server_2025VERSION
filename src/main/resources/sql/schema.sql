-- Schema generated to match JPA entities in com.teambind.profileserver.entity

-- 사용자 정보
CREATE TABLE IF NOT EXISTS user_info (
    user_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    id VARCHAR(255) NOT NULL UNIQUE,
    profile_image_url VARCHAR(255),
    sex VARCHAR(1),
    nickname VARCHAR(100) NOT NULL UNIQUE,
    location INT,
    version INT NOT NULL DEFAULT 0,
    created_at TIMESTAMP,
    last_updated_at TIMESTAMP,
    is_public BOOLEAN,
    is_chatable BOOLEAN
);

-- 프로필 변경 이력
CREATE TABLE IF NOT EXISTS profile_update_history (
    history_id BIGINT PRIMARY KEY,
    updated_at TIMESTAMP NOT NULL,
    old_val VARCHAR(255),
    new_val VARCHAR(255),
    field_name VARCHAR(255),
    user_id BIGINT NOT NULL,
    version INT NOT NULL DEFAULT 0,
    CONSTRAINT fk_history_user FOREIGN KEY (user_id)
        REFERENCES user_info(user_id)
        ON DELETE CASCADE
);

-- 악기 명칭 테이블
CREATE TABLE IF NOT EXISTS instrument_name (
    instrument_id INT PRIMARY KEY,
    instrument_name VARCHAR(255) NOT NULL
);

-- 사용자-악기 매핑 (EmbeddedId: user_id + instrumentId) + 낙관적 락 version
CREATE TABLE IF NOT EXISTS instruments (
    user_id BIGINT NOT NULL,
    instrumentId INT NOT NULL,
    version INT NOT NULL DEFAULT 0,
    PRIMARY KEY (user_id, instrumentId),
    CONSTRAINT fk_instruments_user FOREIGN KEY (user_id)
        REFERENCES user_info(user_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_instruments_instrument FOREIGN KEY (instrumentId)
        REFERENCES instrument_name(instrument_id)
);

-- 장르 명칭 테이블 (주의: 엔티티 컬럼명이 genreId)
CREATE TABLE IF NOT EXISTS genre_name (
    genre_Id INT PRIMARY KEY,
    genre_name VARCHAR(255) NOT NULL
);

-- 사용자-장르 매핑 (EmbeddedId: user_id + genreId)
-- 엔티티에 별도 컬럼 genre_id 도 존재하므로 함께 생성
CREATE TABLE IF NOT EXISTS user_genres (
    user_id BIGINT NOT NULL,
    genre_id INT NOT NULL,
    version INT NOT NULL DEFAULT 0,
    PRIMARY KEY (user_id, genre_Id),
    CONSTRAINT fk_user_genres_user FOREIGN KEY (user_id)
        REFERENCES user_info(user_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_user_genres_genre FOREIGN KEY (genre_Id)
        REFERENCES genre_name(genre_Id)
);

-- auth.shedlock definition

CREATE TABLE IF NOT EXISTS shedlock
(
    `name`       varchar(64)  NOT NULL,
    `lock_until` timestamp(3) NOT NULL,
    `locked_at`  timestamp(3) NOT NULL,
    `locked_by`  varchar(255) NOT NULL,
    PRIMARY KEY (`name`)
    ) ENGINE = InnoDB
    DEFAULT CHARSET = utf8mb4
    COLLATE = utf8mb4_0900_ai_ci;
